name: "On Pull Request"

on:
  pull_request:
    branches:
      - devel
    paths-ignore:
      - 'doc/**'
      - 'extras/**'
      - '!extras/Dockerfile.builder'
      - '**.md'

# Skip based on commit msg is inbuilt into Github Runner
# Visit: https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/

jobs:
  # Primarily used to save info required for any jobs/steps
  get-info:
    name: Save required info
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.files.outputs.out }}
      build_base: ${{ steps.build_base.outputs.out }}
    steps:
      - id: files
        run: |
          URL="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files"
          FILES=$(curl -s -X GET -G $URL | jq -r '.[] | .filename')
          echo ::set-output name=out::$FILES
      - id: build_base
        env:
          FILES: ${{ steps.files.outputs.out }}
        run: |
          BUILD_BASE="no"
          # build base image if one of below conditions is met
          # 1. if we have only CHANGELOG.md update (basically getting ready for a release)
          if grep -e 'CHANGELOG.md' <<< "$b" && [ $(wc -w <<< "$b") == 1 ]; then
            BUILD_BASE="yes"
          # 2. if builder dockerfile is edited
          elif grep -e 'extras/Dockerfile.builder' <<< "$FILES"; then
            BUILD_BASE="yes"
          fi
          echo ::set-output name=out::$BUILD_BASE

  pylint:
    name: Run pylint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.10'

    - uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements/ci_submit-requirements.txt') }}-${{ hashFiles('requirements/ci_merge-requirements.txt') }}

    - name: Install dependencies pylint
      run: |
          python -m pip install --upgrade --upgrade-strategy eager -r requirements/ci_submit-requirements.txt -r requirements/ci_merge-requirements.txt -e ./requirements

    - name: Run pylint
      run: make pylint

  run-on-minikube:
    name: Kube Tests
    # Refer https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md for all the
    # tools that comes pre-installed with this runner
    runs-on: ubuntu-22.04
    needs: get-info
    env:
      FILES: ${{needs.get-info.outputs.files}}
      BUILD_BASE: ${{needs.get-info.outputs.build_base}}
    steps:
    - uses: actions/checkout@v2
    # CLI Tests
    - name: Install Binnacle and build kubectl-kadalu
      run: |
        curl -L https://github.com/kadalu/binnacle/releases/latest/download/binnacle -o binnacle
        chmod +x ./binnacle
        sudo mv ./binnacle /usr/local/bin/binnacle
        binnacle --version
        make cli-build
    - name: kubectl-kadalu Tests
      run: binnacle -v cli/tests/storage_add.t
    - name: Build locally
      id: build_local
      run: |
        BUILD_BASE="$BUILD_BASE" make build-containers;

        # Conditionally build test containers if PR includes tests/**/Dockerfile
        CONTAINERS_FOR=''
        if grep -e '\btests.*Dockerfile\b' <<< "$FILES"; then
          CONTAINERS_FOR=TESTING
        fi
        # In build script, only test containers will be built if this variable is set
        if [[ "$CONTAINERS_FOR" == "TESTING" ]]; then
          CONTAINERS_FOR=TESTING make test-containers
        fi
        echo Completed building containers
    - name: Generate Manifests
      run: VERBOSE="yes" make gen-manifest

    - name: Install Dependencies
      run: |
        sudo apt-get install -y conntrack socat --no-install-recommends
        sudo mkdir -p /usr/local/bin

        # Setup Docker shim for Minikube since it's deprecated as a runtime
        CRI_DOCKERD_VERSION="0.2.5"
        curl -sSfL https://github.com/Mirantis/cri-dockerd/releases/download/v${CRI_DOCKERD_VERSION}/cri-dockerd-${CRI_DOCKERD_VERSION}.amd64.tgz | tar xzvf -
        sudo install -o root -g root -m 0755 cri-dockerd/cri-dockerd /usr/local/bin/cri-dockerd
        sudo curl -sSfL \
          https://raw.githubusercontent.com/Mirantis/cri-dockerd/v${CRI_DOCKERD_VERSION}/packaging/systemd/cri-docker.service \
          -o /etc/systemd/system/cri-docker.service
        sudo curl -sSfL \
          https://raw.githubusercontent.com/Mirantis/cri-dockerd/v${CRI_DOCKERD_VERSION}/packaging/systemd/cri-docker.socket \
          -o /etc/systemd/system/cri-docker.socket
        sudo sed -i -e "s,/usr/bin/cri-dockerd,$(which cri-dockerd)," /etc/systemd/system/cri-docker.service
        sudo systemctl daemon-reload
        sudo systemctl enable cri-docker.service
        sudo systemctl enable --now cri-docker.socket

        CRICTL_VERSION="1.25.0"
        curl -sSfL https://github.com/kubernetes-sigs/cri-tools/releases/download/v${CRICTL_VERSION}/crictl-v${CRICTL_VERSION}-linux-amd64.tar.gz | tar xzvf -
        sudo install -o root -g root -m 0755 crictl /usr/local/bin/crictl

    # Operator Tests
    - name: Setup Minikube
      run: sudo tests/minikube.sh up
    - name: Run tests
      run: tests/ci-test.sh
    - name: Cleanup
      run: sudo tests/minikube.sh clean

    # CLI Tests (run conditionally)
    - name: Setup Minikube (CLI Test)
      run: sudo tests/minikube.sh up
      if: "contains(needs.get-info.outputs.files, 'cli')"
    - name: Run tests (CLI Test)
      run: tests/ci-test.sh cli
      if: "contains(needs.get-info.outputs.files, 'cli')"
    - name: Cleanup (CLI Test)
      run: sudo tests/minikube.sh clean
      if: "contains(needs.get-info.outputs.files, 'cli')"
